---
title: "Lab 8: Machine Learning"
subtitle: 'Ecosystem Science and Sustainability 330'
author: 
  - name: "Cecily Sperber"
    email: "csperber@colostate.edu"
format:
  html:
    self-contained: true 
execute:
  echo: true
---



# Data 


```{r}
library(tidyverse)        
library(tidymodels)       
library(skimr)            
library(visdat)           
library(ggpubr)           
library(powerjoin)        
library(rsample)  
library(baguette)

types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
root <- 'https://gdex.ucar.edu/dataset/camels/file'

remote_files <- glue::glue('{root}/camels_{types}.txt')
local_files <- glue::glue('data/camels_{types}.txt')

purrr::walk2(remote_files, local_files, download.file, quiet = TRUE)

camels_list <- purrr::map(local_files, readr::read_delim, show_col_types = FALSE)

camels <- power_full_join(camels_list, by = "gauge_id")

camels <- camels %>%
  mutate(logQmean = log(q_mean))

camels_clean <- camels %>% 
  drop_na(q_mean)  

set.seed(123)
camels_split <- initial_split(camels_clean, prop = 0.8)
camels_train <- training(camels_split)
camels_test <- testing(camels_split)

```


# Recipe


```{r}
rec <- recipe(q_mean ~ aridity + p_mean, data = camels_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) %>%
  step_normalize(all_predictors())

```



# Resampling and Model Testing


```{r}
camels_cv <- vfold_cv(camels_train, v = 10)

lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression") 

nm_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

rf_model <- rand_forest() %>%
  set_engine("ranger") %>%
  set_mode("regression")

wf_set <- workflow_set(list(rec), list(lm_model, rf_model, nm_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv)

autoplot(wf_set)


```


I will use the random forest model because it had the lowest RSME and highest R^2. Having a low RSME and high R^2 suggests the model is the most accurate at predicting mean potential evapotranspiration using the CAMELS data.

Describe the model you selected. What is the model type, engine, and mode. Why do you think it is performing well for this problem?


# Model Tuning 


```{r}
rf_tune <- rand_forest(
  mtry = tune(),
  min_n = tune()
) %>%
  set_engine("ranger") %>%
  set_mode("regression")

wf_tune <- workflow() %>%
  add_model(rf_tune) %>%
  add_recipe(rec)

dials <- extract_parameter_set_dials(wf_tune)

final_dials <- dials %>%
  update(mtry = dials::mtry(range = c(1, 5))) %>%
  finalize(camels_train)

final_dials  

set.seed(123)
my.grid <- grid_space_filling(
  final_dials,
  size = 25
)

model_params <- tune_grid(
  wf_tune,
  resamples = camels_cv,
  grid = my.grid,
  metrics = metric_set(rmse, rsq, mae),
  control = control_grid(save_pred = TRUE)
)

autoplot(model_params)

collect_metrics(model_params)

show_best(model_params, metric = "mae")

hp_best <- select_best(model_params, metric = "mae")

final_wf <- finalize_workflow(wf_tune, hp_best)

  
```



# Model Verification 


```{r}
final_fit <- last_fit(final_wf,split = camels_split)

final_preds <- collect_predictions(final_fit)

library(ggplot2)

ggplot(final_preds, aes(x = .pred, y = q_mean)) +
  geom_point(alpha = 0.6, color = "#0072B2") +
  geom_smooth(method = "lm", se = FALSE, color = "#D55E00") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray30") +
  labs(
    title = "Predicted vs Actual q_mean",
    x = "Predicted q_mean",
    y = "Observed q_mean"
  ) +
  theme_minimal()

```



# Map 


```{r}
final_model <- rand_forest(
  mtry = best_mtry,
  min_n = best_min_n
) %>%
  set_engine("ranger") %>%
  set_mode("regression")

hp_best <- select_best(model_params, metric = "mae")

final_model <- finalize_model(rf_tune, hp_best)

final_wf <- workflow() %>%
  add_model(final_model) %>%
  add_recipe(rec)

final_fit_full <- fit(final_wf, data = camels_clean)

final_predictions_full <- augment(final_fit_full, new_data = camels_clean)

final_predictions_full %>%
  mutate(residuals = (.pred - q_mean)^2)

pred_plot <- ggplot(final_predictions_full, aes (x = gauge_lon, y = gauge_lat))+
  geom_point(aes(color = .pred), size = 2) +
  scale_color_viridis_c() + 
  labs(
    title = "Predictions of q_mean",
    x = "Longitude",
    y = "Latitude"
  ) +
  theme_minimal()
print(pred_plot)

final_predictions_full <- final_predictions_full %>%
  mutate(.resid = q_mean - .pred)

residuals_plot <- ggplot(final_predictions_full, aes(x = gauge_lon, y = gauge_lat))+
  geom_point(aes(color = .resid), size =2) +
  scale_color_viridis_c() +
  labs(
    title = "Residuals of q_mean Predictions",
    x = "Longitude",
    y = "Latitude"
  ) +
  theme_minimal()
print(residuals_plot)

library(patchwork)

pred_plot + residuals_plot  
 
```

