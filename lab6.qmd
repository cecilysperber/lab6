---
title: "Lab 6: Machine Learning in Hydrology"
subtitle: 'Ecosystem Science and Sustainability 330'
author: 
  - name: "Cecily Sperber"
    email: "csperber@colostate.edu"
format:
  html:
    self-contained: true 
execute:
  echo: true
---


```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)


root  <- 'https://gdex.ucar.edu/dataset/camels/file'

download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')

types <- c("clim", "geol", "soil", "topo", "vege", "hydro")

remote_files  <- glue('{root}/camels_{types}.txt')
local_files   <- glue('data/camels_{types}.txt')

walk2(remote_files, local_files, download.file, quiet = TRUE)

camels <- map(local_files, read_delim, show_col_types = FALSE) 

camels <- power_full_join(camels ,by = 'gauge_id')

```

# Question 1
```{r}
file.exists("data/camels_attributes_v2.0.pdf")

library("ggthemes")

ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()

scale_color_manual(values = c("red", "yellow", "pink"))

scale_color_gradient(low = "blue", high = "red")

```

# Question 2
```{r}
library(ggplot2)
library(patchwork)

map_aridity <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = aridity)) +
  scale_color_viridis_c() +
  labs(title = "Map Colored by Aridity", color = "Aridity") +
  theme_map()

map_rainfall <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean)) +
  scale_color_viridis_c() +
  labs(title = "Map Colored by Rainfall (p_mean)", color = "Rainfall") +
  theme_map()

map_aridity + map_rainfall

ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  scale_color_viridis_c() +
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")

ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runoff (Log-Transformed)", 
       x = "Aridity (Log)",
       y = "Rainfall (Log)",
       color = "Mean Flow")

```

# Model Building
```{r}
set.seed(123)

camels <- camels %>% 
  mutate(logQmean = log(q_mean))

camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)

rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) |> 
  step_naomit(all_predictors(), all_outcomes())

baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)

summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))

test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred = predict(lm_base, newdata = test_data)
```

# Model Evaluation 
```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)

ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

lm_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(lm_model) %>%
  fit(data = camels_train) 

summary(extract_fit_engine(lm_wf))$coefficients

summary(lm_base)$coefficients

lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)

metrics(lm_data, truth = logQmean, estimate = .pred)

ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model) %>%
  fit(data = camels_train) 

rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)

metrics(rf_data, truth = logQmean, estimate = .pred)

ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()

wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)

rank_results(wf, rank_metric = "rsq", select_best = TRUE)

```

# Question 3
```{r}
library(tidymodels)
library(xgboost)
library(baguette)
library(randomForest)
library(vip)
library(tidyverse)
library(powerjoin)

types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
root <- 'https://gdex.ucar.edu/dataset/camels/file'

remote_files <- glue::glue('{root}/camels_{types}.txt')
local_files <- glue::glue('data/camels_{types}.txt')

purrr::walk2(remote_files, local_files, download.file, quiet = TRUE)

camels_list <- purrr::map(local_files, readr::read_delim, show_col_types = FALSE)

camels <- power_full_join(camels_list, by = "gauge_id")

camels_clean <- camels %>%
  drop_na(q_mean)

set.seed(42)
data_split <- initial_split(camels_clean, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)

recipe_spec <- recipe(q_mean ~ aridity + p_mean, data = train_data) %>%
  step_normalize(all_predictors())

xgb_spec <- boost_tree(mode = "regression", trees = 1000, min_n = 10, tree_depth = 6, learn_rate = 0.01) %>%
  set_engine("xgboost")

nn_spec <- bag_mlp(mode = "regression", hidden_units = 5, epochs = 100) %>%
  set_engine("nnet")

rf_spec <- rand_forest(mode = "regression", mtry = 2, trees = 1000) %>%
  set_engine("randomForest")

lm_spec <- linear_reg() %>%
  set_engine("lm")

xgb_workflow <- workflow() %>% add_recipe(recipe_spec) %>% add_model(xgb_spec)
nn_workflow <- workflow() %>% add_recipe(recipe_spec) %>% add_model(nn_spec)
rf_workflow <- workflow() %>% add_recipe(recipe_spec) %>% add_model(rf_spec)
lm_workflow <- workflow() %>% add_recipe(recipe_spec) %>% add_model(lm_spec)

xgb_fit <- fit(xgb_workflow, data = train_data)
nn_fit  <- fit(nn_workflow, data = train_data)
rf_fit  <- fit(rf_workflow, data = train_data)
lm_fit  <- fit(lm_workflow, data = train_data)

xgb_preds <- predict(xgb_fit, new_data = test_data) %>% bind_cols(test_data)
nn_preds  <- predict(nn_fit, new_data = test_data) %>% bind_cols(test_data)
rf_preds  <- predict(rf_fit, new_data = test_data) %>% bind_cols(test_data)
lm_preds  <- predict(lm_fit, new_data = test_data) %>% bind_cols(test_data)

print(colnames(xgb_preds))
print(head(xgb_preds))

xgb_metrics <- metrics(xgb_preds, truth = q_mean, estimate = .pred)
nn_metrics  <- metrics(nn_preds, truth = q_mean, estimate = .pred)
rf_metrics  <- metrics(rf_preds, truth = q_mean, estimate = .pred)
lm_metrics  <- metrics(lm_preds, truth = q_mean, estimate = .pred)

print(xgb_metrics)
print(nn_metrics)
print(rf_metrics)
print(lm_metrics)

 
```
## I would move forward with the Neutral Network Model (NN). 

# Building My Own
```{r}
library(tidyverse)
library(tidymodels) 
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(nnet)

types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
root <- 'https://gdex.ucar.edu/dataset/camels/file'

remote_files <- glue::glue('{root}/camels_{types}.txt')
local_files <- glue::glue('data/camels_{types}.txt')

purrr::walk2(remote_files, local_files, download.file, quiet = TRUE)

camels_list <- purrr::map(local_files, readr::read_delim, show_col_types = FALSE)
camels <- power_full_join(camels_list, by = "gauge_id")
camels_clean <- camels %>% drop_na(q_mean) %>% mutate(logQmean = log(q_mean))

set.seed(42)
data_split <- initial_split(camels_clean, prop = 0.75)
train_data <- training(data_split)
test_data <- testing(data_split)
camels_cv <- vfold_cv(train_data, v = 10)

tree_recipe <- recipe(logQmean ~ aridity + p_mean, data = train_data) %>%
  step_normalize(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) %>%
  step_naomit(all_predictors(), all_outcomes())

rf_model <- rand_forest(mode = "regression", mtry = 2, trees = 1000) %>%
  set_engine("ranger")

nn_model <- mlp(mode = "regression", hidden_units = 5, epochs = 100) %>%
  set_engine("nnet")

xgb_model <- boost_tree(mode = "regression", trees = 1000, min_n = 10, tree_depth = 6, learn_rate = 0.01) %>%
  set_engine("xgboost")

wf_set <- workflow_set(
  preproc = list(tree_recipe),
  models = list(Random_Forest = rf_model, Neural_Network = nn_model, XGBoost = xgb_model)
) %>%
  workflow_map("fit_resamples", resamples = camels_cv)

autoplot(wf_set)
rank_results(wf_set, rank_metric = "rsq", select_best = TRUE)

best_wf <- extract_workflow(wf_set, id = "recipe_Neural_Network")
best_fit <- fit(best_wf, data = train_data)
nn_preds <- augment(best_fit, new_data = test_data)

ggplot(nn_preds, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw() +
  labs(title = "Neural Network: Observed vs Predicted", 
       x = "Observed Log Mean Flow", 
       y = "Predicted Log Mean Flow", 
       color = "Aridity")

```

## 4b - I chose the logQmean ~ aridity + p_mean formula for predicting mean streamflow because aridity and mean precipitation (p_mean) are important drivers of streamflow. 

## 4e - I think the best model is the Neutral Network Model because it had an R^2 that was greater than 0.9 and it had the lowest RMSE value.

## 4f - I think the results for my Neutral Network model turned out very well. The plot shows there is a great linear relationship between airidity, precipitation, and streamflow. 

 